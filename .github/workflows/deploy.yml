name: Deploy to GCP Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod

env:
  REGION: us-central1
  SERVICE_NAME: eas-validator
  # BWS credentials - only GitHub secrets we need
  BWS_ACCESS_TOKEN: ${{ secrets.BWS_ACCESS_TOKEN }}
  BWS_PROJECT_ID: ${{ secrets.BWS_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Install BWS CLI
      run: |
        # Install BWS CLI using pre-built binary for Linux x86_64
        wget -O bws.zip "https://github.com/bitwarden/sdk-sm/releases/download/bws-v1.0.0/bws-x86_64-unknown-linux-gnu-1.0.0.zip"
        unzip bws.zip
        sudo chmod +x bws
        sudo mv bws /usr/local/bin/
        rm bws.zip
        
        # Verify installation
        bws --version

    - name: Set up environment variables and resolve GCP credentials
      run: |
        # Determine environment from explicit input only
        if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "SERVICE_NAME=eas-validator-prod" >> $GITHUB_ENV
          ENV_NAME="PROD"
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SERVICE_NAME=eas-validator-staging" >> $GITHUB_ENV
          ENV_NAME="STAGING"
        fi
        
        # Use taskfile to resolve secrets with 5D pattern, explicitly passing BWS credentials
        PROJECT_ID=$(BWS_ACCESS_TOKEN="${{ env.BWS_ACCESS_TOKEN }}" BWS_PROJECT_ID="${{ env.BWS_PROJECT_ID }}" NETWORK=CLOUD ENVIRONMENT=$ENV_NAME SERVICE=VALIDATOR task secrets:resolve SECRET_ITEM=GCP_PROJECT_ID)
        echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV
        echo "IMAGE_NAME=gcr.io/${PROJECT_ID}/${{ env.SERVICE_NAME }}" >> $GITHUB_ENV
        
        # Get GCP service account key using taskfile and save to file
        BWS_ACCESS_TOKEN="${{ env.BWS_ACCESS_TOKEN }}" BWS_PROJECT_ID="${{ env.BWS_PROJECT_ID }}" NETWORK=CLOUD ENVIRONMENT=$ENV_NAME SERVICE=VALIDATOR task secrets:resolve SECRET_ITEM=GCP_SERVICE_ACCOUNT_KEY > /tmp/gcp-key.json

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Authenticate to Google Cloud
      run: |
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json

    - name: Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker
        # Also configure for newer artifact registry format
        gcloud auth configure-docker gcr.io

    - name: Enable required APIs
      run: |
        gcloud services enable cloudbuild.googleapis.com \
                              run.googleapis.com \
                              secretmanager.googleapis.com \
                              --project=${PROJECT_ID}



    - name: Build Docker image
      run: |
        docker build -t "${IMAGE_NAME}:latest" \
                     -f src/main/typescript/validator/Dockerfile \
                     src/main/typescript/validator/
        
        # Tag with commit SHA and timestamp for versioning
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        VERSIONED_TAG="${COMMIT_SHA}-${TIMESTAMP}"
        echo "VERSIONED_TAG=${VERSIONED_TAG}" >> $GITHUB_ENV
        docker tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:${VERSIONED_TAG}"

    - name: Push Docker image
      run: |
        docker push "${IMAGE_NAME}:latest"
        
        # Push versioned tag
        docker push "${IMAGE_NAME}:${VERSIONED_TAG}"

    - name: Deploy to Cloud Run
      run: |
        # Update the cloud-run.yaml with actual values
        DEPLOY_DIR="deploy/cloud/${ENVIRONMENT}"
        
        if [ ! -f "${DEPLOY_DIR}/cloud-run.yaml" ]; then
          echo "Cloud Run configuration not found for environment: ${ENVIRONMENT}"
          exit 1
        fi
        
        # Create temporary deployment file with substitutions
        cp "${DEPLOY_DIR}/cloud-run.yaml" cloud-run-deploy.yaml
        sed -i "s/PROJECT_ID/${PROJECT_ID}/g" cloud-run-deploy.yaml
        sed -i "s/SERVICE_NAME/${SERVICE_NAME}/g" cloud-run-deploy.yaml
        sed -i "s|IMAGE_NAME|${IMAGE_NAME}:latest|g" cloud-run-deploy.yaml
        sed -i "s/BWS_ACCESS_TOKEN_PLACEHOLDER/${{ env.BWS_ACCESS_TOKEN }}/g" cloud-run-deploy.yaml
        sed -i "s/BWS_PROJECT_ID_PLACEHOLDER/${{ env.BWS_PROJECT_ID }}/g" cloud-run-deploy.yaml
        
        # Deploy the service
        gcloud run services replace cloud-run-deploy.yaml \
          --region="${REGION}" \
          --project="${PROJECT_ID}"

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe "${SERVICE_NAME}" \
                     --region="${REGION}" \
                     --project="${PROJECT_ID}" \
                     --format="value(status.url)")
        echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_OUTPUT
        echo "Service URL: ${SERVICE_URL}"

    - name: Test deployment
      run: |
        SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"
        
        echo "Testing health endpoint..."
        for i in {1..5}; do
          if curl -f "${SERVICE_URL}/health" > /dev/null 2>&1; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚è≥ Attempt $i/5 failed, waiting 10 seconds..."
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ùå Health check failed after 5 attempts"
            exit 1
          fi
        done

    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Deployment to ${ENVIRONMENT} completed successfully!"
          echo "Service URL: ${{ steps.get-url.outputs.SERVICE_URL }}"
        else
          echo "‚ùå Deployment to ${ENVIRONMENT} failed"
        fi

    - name: Cleanup
      if: always()
      run: |
        rm -f cloud-run-deploy.yaml /tmp/gcp-key.json
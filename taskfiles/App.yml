version: '3'

# Application-specific tasks for EAS Attestor for Github
vars:
  BUILD_DIR: build
  HTML_DIST_DIR: "{{.BUILD_DIR}}/html/dist"
  VALIDATOR_SRC_DIR: "src/main/typescript/validator"
  VALIDATOR_BUILD_DIR: "{{.BUILD_DIR}}/typescript/validator"

tasks:
  # Build tasks (application-specific only)
  build:
    desc: Build all application components (dApp and validator)
    deps: [build:dist, build:validator]


  build:dist:
    desc: Build dApp for deployment
    cmds:
      - mkdir -p {{.HTML_DIST_DIR}}
      - cp -r src/main/html/* {{.HTML_DIST_DIR}}/
      - |
        # Inject build-time environment variables
        if [ -n "$EAS_VALIDATOR_URL" ]; then
          echo "üîß Injecting validator URL: $EAS_VALIDATOR_URL"
          sed -i.bak "s|// BUILD_TIME_CONFIG_INJECTION|window.EAS_VALIDATOR_URL = '$EAS_VALIDATOR_URL';|g" {{.HTML_DIST_DIR}}/config.js
          rm {{.HTML_DIST_DIR}}/config.js.bak 2>/dev/null || true
        else
          echo "‚ö†Ô∏è  No EAS_VALIDATOR_URL set - using dynamic detection"
        fi
    deps: []
    sources:
      - src/main/html/**/*
    generates:
      - "{{.HTML_DIST_DIR}}/**/*"

  build:validator:
    desc: Build validator service with HTML files
    deps: [build:dist]
    cmds:
      - echo "üî® Building validator service..."
      - mkdir -p {{.VALIDATOR_BUILD_DIR}}
      - cp -r {{.VALIDATOR_SRC_DIR}}/* {{.VALIDATOR_BUILD_DIR}}/
      - echo "üìÑ Copying HTML files to validator build..."
      - cp -r {{.HTML_DIST_DIR}} {{.VALIDATOR_BUILD_DIR}}/html/
      - cd {{.VALIDATOR_BUILD_DIR}} && npm ci --only=production
      - echo "‚úÖ Validator build complete with HTML files"
    sources:
      - "{{.VALIDATOR_SRC_DIR}}/**/*"
      - "{{.HTML_DIST_DIR}}/**/*"
    generates:
      - "{{.VALIDATOR_BUILD_DIR}}/**/*"

  # Application tests (TypeScript)
  test:typescript:
    desc: Run TypeScript application tests
    cmds:
      - npm test


  # Development tasks
  dev:
    desc: Start complete development environment
    cmds:
      - ./scripts/task/app/dev-server.sh

  serve:
    desc: Serve the built dApp locally
    deps: [build:dist]
    cmds:
      - ./scripts/task/app/serve.sh

  serve:bg:
    desc: Serve the dApp in background
    deps: [build:dist] 
    cmds:
      - ./scripts/task/app/serve-bg.sh

  # Validator service tasks
  validator:install:
    desc: Install validator dependencies
    dir: '{{.VALIDATOR_SRC_DIR}}'
    cmds:
      - echo "Installing validator dependencies..."
      - npm install

  validator:dev:
    desc: Run validator service locally for development
    dir: '{{.VALIDATOR_SRC_DIR}}'
    deps: [validator:install]
    cmds:
      - echo "Starting validator in development mode..."
      - echo "Make sure to copy .env.example to .env and set VALIDATOR_PRIVATE_KEY"
      - node index.js

  validator:docker:build:
    desc: Build validator Docker image for x86_64 architecture
    deps: [build:validator]
    cmds:
      - echo "Building validator Docker image for linux/amd64..."
      - cp {{.VALIDATOR_SRC_DIR}}/Dockerfile {{.VALIDATOR_BUILD_DIR}}/
      - docker buildx build --platform linux/amd64 -t allenday/eas-validator:latest {{.VALIDATOR_BUILD_DIR}}
      - echo "Docker image built - allenday/eas-validator:latest (linux/amd64)"

  validator:docker:push:
    desc: Push validator Docker image to DockerHub
    deps: [validator:docker:build]
    cmds:
      - echo "Pushing validator Docker image to DockerHub..."
      - docker push allenday/eas-validator:latest
      - echo "Docker image pushed - allenday/eas-validator:latest"

  validator:docker:run:
    desc: Run validator container locally
    deps: [validator:docker:build]
    cmds:
      - echo "Starting validator container..."
      - docker run --rm -p 5001:5001 --env-file {{.VALIDATOR_SRC_DIR}}/.env eas-validator:latest

  validator:docker:bg:
    desc: Run validator container in background
    deps: [validator:docker:build]
    cmds:
      - echo "Starting validator container in background..."
      - docker run -d --name eas-validator -p 5001:5001 --env-file {{.VALIDATOR_SRC_DIR}}/.env eas-validator:latest
      - echo "Validator running at http://localhost:5001"
      - echo "Use 'task app:validator:docker:stop' to stop"

  validator:docker:stop:
    desc: Stop validator container
    cmds:
      - echo "Stopping validator container..."
      - docker stop eas-validator || true
      - docker rm eas-validator || true

  validator:docker:logs:
    desc: Show validator container logs
    cmds:
      - docker logs -f eas-validator

  validator:health:
    desc: Check validator health
    cmds:
      - echo "Checking validator health..."
      - curl -f http://localhost:5001/health || echo "Validator not responding"

  validator:test:
    desc: Test validation endpoint (requires GITHUB_USERNAME, GIST_URL, ETH_ADDRESS)
    preconditions:
      - sh: '[ -n "{{.GITHUB_USERNAME}}" ]'
        msg: "GITHUB_USERNAME required. Usage: task app:validator:test GITHUB_USERNAME=yourname GIST_URL=https://... ETH_ADDRESS=0x..."
      - sh: '[ -n "{{.GIST_URL}}" ]'
        msg: "GIST_URL required"
      - sh: '[ -n "{{.ETH_ADDRESS}}" ]'
        msg: "ETH_ADDRESS required"
    cmds:
      - echo "Testing validation endpoint..."
      - |
        curl -X POST http://localhost:5001/validate \
          -H "Content-Type: application/json" \
          -d '{
            "githubUsername": "{{.GITHUB_USERNAME}}",
            "gistUrl": "{{.GIST_URL}}",
            "ethereumAddress": "{{.ETH_ADDRESS}}"
          }' | jq .

  dev:stop:
    desc: Stop development environment
    cmds:
      - ./scripts/task/app/stop-dev.sh

  # Docker Compose tasks
  docker:up:
    desc: Start local docker-compose environment
    deps: [build]
    cmds:
      - echo "Starting local docker-compose environment..."
      - cd deploy/local/dev && docker compose up -d
      - echo "Services running at localhost ports 6000 (dApp) and 6001 (validator)"

  docker:down:
    desc: Stop local docker-compose environment
    cmds:
      - echo "Stopping local docker-compose environment..."
      - cd deploy/local/dev && docker compose down

  docker:logs:
    desc: Show docker-compose logs
    cmds:
      - cd deploy/local/dev && docker compose logs -f

  docker:status:
    desc: Show docker-compose status
    cmds:
      - cd deploy/local/dev && docker compose ps

  create-schema:
    desc: Show instructions for creating EAS schema
    cmds:
      - ./scripts/task/app/create-schema.sh {{.NETWORK | default "base-sepolia"}}

  # Format tasks (application-specific only)  
  format:typescript:
    desc: Format TypeScript code
    cmds:
      - npm run format

  # Clean tasks
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}

  # Health check tasks
  doctor:
    desc: Application-specific health checks
    cmds:
      - echo "üè• Running EAS Attestor for Github health checks..."
      - cmd: node --version
        silent: true
      - echo "‚úÖ Node.js is available"
      - cmd: test -d src/main/html
      - echo "‚úÖ dApp source directory exists"
      - cmd: test -d src/main/typescript/validator
      - echo "‚úÖ Validator service directory exists"
      - cmd: test -f package.json
      - echo "‚úÖ Node.js package file found"
      - cmd: test -f tsconfig.json
      - echo "‚úÖ TypeScript configuration found"
      - echo ""
      - echo "üîê Checking secret management configuration..."
      - task: :secrets:doctor
      - echo "üéâ All application health checks passed!"


  # Setup tasks
  setup:
    desc: Setup application development environment
    cmds:
      - echo "üöÄ Setting up EAS Attestor for Github..."
      - npm install
      - mkdir -p {{.BUILD_DIR}} {{.HTML_DIST_DIR}} {{.VALIDATOR_BUILD_DIR}} deployments state
      - task app:validator:install
      - task build
      - echo "‚úÖ Application setup complete!"


  # Kubernetes deployment tasks
  k8s:deploy:staging:
    desc: Deploy complete staging environment (Base Sepolia) with all prerequisites
    env:
      BWS_ACCESS_TOKEN: "${BWS_ACCESS_TOKEN}"
      BWS_PROJECT_ID: "${BWS_PROJECT_ID}"
    cmds:
      - |
        echo "üöÄ Deploying staging environment with all prerequisites..."
        
        # Use local kubeconfig for now until BWS token issue is resolved
        KUBECONFIG="../kube-hetzner/k3s_kubeconfig.yaml"
        
        echo "üìã Creating namespaces (idempotent)..."
        kubectl --kubeconfig="$KUBECONFIG" create namespace staging --dry-run=client -o yaml | kubectl --kubeconfig="$KUBECONFIG" apply -f -
        kubectl --kubeconfig="$KUBECONFIG" create namespace production --dry-run=client -o yaml | kubectl --kubeconfig="$KUBECONFIG" apply -f -
        
        echo "üîë Applying SecretStore configuration..."
        kubectl --kubeconfig="$KUBECONFIG" apply -f bitwarden-secretstore.yaml
        
        echo "üìã Applying ClusterIssuer (prerequisite)..."
        kubectl --kubeconfig="$KUBECONFIG" apply -f deploy/k8s/staging/letsencrypt-clusterissuer.yaml
        
        echo "üìã Applying all staging resources (secrets, service, deployment, ingress)..."  
        kubectl --kubeconfig="$KUBECONFIG" apply -f deploy/k8s/staging/
        
        echo "‚úÖ Deployment complete! Checking status..."
        kubectl --kubeconfig="$KUBECONFIG" get all -n staging
        echo ""
        echo "üîç SSL Certificate status:"
        kubectl --kubeconfig="$KUBECONFIG" get certificate -n staging
    preconditions:
      - sh: '[ -f "../kube-hetzner/k3s_kubeconfig.yaml" ]'
        msg: "kubeconfig file not found at ../kube-hetzner/k3s_kubeconfig.yaml"
      - sh: '[ -f "bitwarden-secretstore.yaml" ]'
        msg: "SecretStore configuration not found at bitwarden-secretstore.yaml"

  k8s:deploy:production:
    desc: Deploy to Kubernetes production environment (Base mainnet)
    cmds:
      - kubectl apply -f deploy/k8s/production/

  k8s:destroy:staging:
    desc: Destroy Kubernetes staging environment
    cmds:
      - kubectl delete -f deploy/k8s/staging/ || true

  k8s:destroy:production:
    desc: Destroy Kubernetes production environment
    cmds:
      - kubectl delete -f deploy/k8s/production/ || true

  k8s:status:staging:
    desc: Check Kubernetes staging deployment status
    cmds:
      - echo "üîç Staging environment status (Base Sepolia)"
      - kubectl get all -n staging
      - echo ""
      - kubectl get ingress -n staging

  k8s:status:production:
    desc: Check Kubernetes production deployment status
    cmds:
      - echo "üîç Production environment status (Base mainnet)"
      - kubectl get all -n production
      - echo ""
      - kubectl get ingress -n production

  k8s:logs:staging:
    desc: Show logs from Kubernetes staging pods
    cmds:
      - kubectl logs -n staging -l app=eas-validator --tail=100 -f

  k8s:logs:production:
    desc: Show logs from Kubernetes production pods
    cmds:
      - kubectl logs -n production -l app=eas-validator --tail=100 -f

  k8s:restart:staging:
    desc: Restart Kubernetes staging deployment
    cmds:
      - kubectl rollout restart deployment/eas-validator -n staging

  k8s:restart:production:
    desc: Restart Kubernetes production deployment
    cmds:
      - kubectl rollout restart deployment/eas-validator -n production

  k8s:shell:staging:
    desc: Open shell in staging pod
    cmds:
      - kubectl exec -it -n staging deployment/eas-validator -- /bin/bash

  k8s:shell:production:
    desc: Open shell in production pod
    cmds:
      - kubectl exec -it -n production deployment/eas-validator -- /bin/bash

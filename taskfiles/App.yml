version: '3'

# Application-specific tasks for EAS Attestor for Github
vars:
  BUILD_DIR: build
  HTML_DIST_DIR: "{{.BUILD_DIR}}/html/dist"
  HTML_DOCS_DIR: "{{.BUILD_DIR}}/html/docs"
  VALIDATOR_SRC_DIR: "src/main/typescript/validator"
  VALIDATOR_BUILD_DIR: "{{.BUILD_DIR}}/typescript/validator"
  VALIDATOR_DEPLOY_DIR: "deploy/validator"

tasks:
  # Build tasks (application-specific only)
  build:
    desc: Build all application components (docs, dApp, and validator)
    deps: [build:docs, build:dist, build:validator]

  build:docs:
    desc: Generate contract documentation
    cmds:
      - forge doc --build
      - mkdir -p {{.HTML_DOCS_DIR}}
      - rm -rf {{.HTML_DOCS_DIR}}/*
      - cp -r docs/book/* {{.HTML_DOCS_DIR}}/ || echo "No docs generated yet"
    sources:
      - src/main/solidity/**/*.sol
    generates:
      - "{{.HTML_DOCS_DIR}}/**/*"

  build:dist:
    desc: Build dApp for deployment
    cmds:
      - mkdir -p {{.HTML_DIST_DIR}}
      - cp -r src/main/html/* {{.HTML_DIST_DIR}}/
      - mkdir -p {{.HTML_DIST_DIR}}/docs
      - cp -r {{.HTML_DOCS_DIR}}/* {{.HTML_DIST_DIR}}/docs/ || true
    deps: [build:docs]
    sources:
      - src/main/html/**/*
    generates:
      - "{{.HTML_DIST_DIR}}/**/*"

  build:validator:
    desc: Build validator service
    cmds:
      - echo "üî® Building validator service..."
      - mkdir -p {{.VALIDATOR_BUILD_DIR}}
      - cp -r {{.VALIDATOR_SRC_DIR}}/* {{.VALIDATOR_BUILD_DIR}}/
      - cd {{.VALIDATOR_BUILD_DIR}} && npm ci --only=production
      - echo "‚úÖ Validator build complete"
    sources:
      - "{{.VALIDATOR_SRC_DIR}}/**/*"
    generates:
      - "{{.VALIDATOR_BUILD_DIR}}/**/*"

  # Application tests (TypeScript)
  test:typescript:
    desc: Run TypeScript application tests
    cmds:
      - npm test

  # Deployment tasks (using Foundry)
  deploy:sepolia:
    desc: Deploy to Base Sepolia
    cmds:
      - echo "Deploying to Base Sepolia..."
      - forge script script/Deploy.s.sol --rpc-url $BASE_SEPOLIA_RPC_URL --broadcast --verify
    preconditions:
      - sh: '[ -n "$DEPLOY_PRIVATE_KEY" ]'
        msg: "DEPLOY_PRIVATE_KEY environment variable is required"
      - sh: '[ -n "$BASE_SEPOLIA_RPC_URL" ]'
        msg: "BASE_SEPOLIA_RPC_URL environment variable is required"

  deploy:mainnet:
    desc: Deploy to Base mainnet
    cmds:
      - echo "Deploying to Base mainnet..."
      - forge script script/Deploy.s.sol --rpc-url $BASE_MAINNET_RPC_URL --broadcast --verify
    preconditions:
      - sh: '[ -n "$DEPLOY_PRIVATE_KEY" ]'
        msg: "DEPLOY_PRIVATE_KEY environment variable is required"
      - sh: '[ -n "$BASE_MAINNET_RPC_URL" ]'
        msg: "BASE_MAINNET_RPC_URL environment variable is required"

  # Development tasks
  dev:
    desc: Start complete development environment
    cmds:
      - ./scripts/task/app/dev-server.sh

  serve:
    desc: Serve the built dApp locally
    deps: [build:dist]
    cmds:
      - ./scripts/task/app/serve.sh

  serve:bg:
    desc: Serve the dApp in background
    deps: [build:dist] 
    cmds:
      - ./scripts/task/app/serve-bg.sh

  # Validator service tasks
  validator:install:
    desc: Install validator dependencies
    dir: '{{.VALIDATOR_SRC_DIR}}'
    cmds:
      - echo "Installing validator dependencies..."
      - npm install

  validator:dev:
    desc: Run validator service locally for development
    dir: '{{.VALIDATOR_SRC_DIR}}'
    deps: [validator:install]
    cmds:
      - echo "Starting validator in development mode..."
      - echo "Make sure to copy .env.example to .env and set VALIDATOR_PRIVATE_KEY"
      - node index.js

  validator:docker:build:
    desc: Build validator Docker image
    deps: [build:validator]
    cmds:
      - echo "Building validator Docker image..."
      - cp {{.VALIDATOR_DEPLOY_DIR}}/docker/Dockerfile {{.VALIDATOR_BUILD_DIR}}/
      - docker build -t eas-validator:latest {{.VALIDATOR_BUILD_DIR}}
      - echo "Docker image built - eas-validator:latest"

  validator:docker:run:
    desc: Run validator container locally
    deps: [validator:docker:build]
    cmds:
      - echo "Starting validator container..."
      - docker run --rm -p 5001:5001 --env-file {{.VALIDATOR_SRC_DIR}}/.env eas-validator:latest

  validator:docker:bg:
    desc: Run validator container in background
    deps: [validator:docker:build]
    cmds:
      - echo "Starting validator container in background..."
      - docker run -d --name eas-validator -p 5001:5001 --env-file {{.VALIDATOR_SRC_DIR}}/.env eas-validator:latest
      - echo "Validator running at http://localhost:5001"
      - echo "Use 'task app:validator:docker:stop' to stop"

  validator:docker:stop:
    desc: Stop validator container
    cmds:
      - echo "Stopping validator container..."
      - docker stop eas-validator || true
      - docker rm eas-validator || true

  validator:docker:logs:
    desc: Show validator container logs
    cmds:
      - docker logs -f eas-validator

  validator:health:
    desc: Check validator health
    cmds:
      - echo "Checking validator health..."
      - curl -f http://localhost:5001/health || echo "Validator not responding"

  validator:test:
    desc: Test validation endpoint (requires GITHUB_USERNAME, GIST_URL, ETH_ADDRESS)
    preconditions:
      - sh: '[ -n "{{.GITHUB_USERNAME}}" ]'
        msg: "GITHUB_USERNAME required. Usage: task app:validator:test GITHUB_USERNAME=yourname GIST_URL=https://... ETH_ADDRESS=0x..."
      - sh: '[ -n "{{.GIST_URL}}" ]'
        msg: "GIST_URL required"
      - sh: '[ -n "{{.ETH_ADDRESS}}" ]'
        msg: "ETH_ADDRESS required"
    cmds:
      - echo "Testing validation endpoint..."
      - |
        curl -X POST http://localhost:5001/validate \
          -H "Content-Type: application/json" \
          -d '{
            "githubUsername": "{{.GITHUB_USERNAME}}",
            "gistUrl": "{{.GIST_URL}}",
            "ethereumAddress": "{{.ETH_ADDRESS}}"
          }' | jq .

  dev:stop:
    desc: Stop development environment
    cmds:
      - ./scripts/task/app/stop-dev.sh

  # Docker Compose tasks
  docker:up:
    desc: Start local docker-compose environment
    deps: [build]
    cmds:
      - echo "Starting local docker-compose environment..."
      - cd deploy/local && docker compose up -d
      - echo "Services running at localhost ports 6000 (dApp) and 6001 (validator)"

  docker:down:
    desc: Stop local docker-compose environment
    cmds:
      - echo "Stopping local docker-compose environment..."
      - cd deploy/local && docker compose down

  docker:logs:
    desc: Show docker-compose logs
    cmds:
      - cd deploy/local && docker compose logs -f

  docker:status:
    desc: Show docker-compose status
    cmds:
      - cd deploy/local && docker compose ps

  create-schema:
    desc: Show instructions for creating EAS schema
    cmds:
      - ./scripts/task/app/create-schema.sh {{.NETWORK | default "base-sepolia"}}

  # Format tasks (application-specific only)  
  format:typescript:
    desc: Format TypeScript code
    cmds:
      - npm run format

  # Clean tasks
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - forge clean
      - rm -rf docs/book

  # Health check tasks
  doctor:
    desc: Application-specific health checks
    cmds:
      - echo "üè• Running EAS Attestor for Github health checks..."
      - cmd: forge --version
        silent: true
      - echo "‚úÖ Foundry is installed"
      - cmd: node --version
        silent: true
      - echo "‚úÖ Node.js is available"
      - cmd: test -f foundry.toml
      - echo "‚úÖ Foundry configuration found"
      - cmd: test -d src/main/solidity
      - echo "‚úÖ Contract source directory exists"
      - cmd: test -d src/main/html
      - echo "‚úÖ dApp source directory exists"
      - cmd: test -f package.json
      - echo "‚úÖ Node.js package file found"
      - cmd: test -f tsconfig.json
      - echo "‚úÖ TypeScript configuration found"
      - echo "üéâ All application health checks passed!"

  # Setup tasks
  setup:
    desc: Setup application development environment
    cmds:
      - echo "üöÄ Setting up EAS Attestor for Github..."
      - forge install
      - npm install
      - mkdir -p {{.BUILD_DIR}} {{.HTML_DIST_DIR}} {{.HTML_DOCS_DIR}} {{.VALIDATOR_BUILD_DIR}} deployments state
      - task app:validator:install
      - task build
      - echo "‚úÖ Application setup complete!"

  # Environment-specific configurations
  check-env:sepolia:
    desc: Check Base Sepolia environment configuration
    cmds:
      - echo "Checking Base Sepolia environment..."
      - cmd: '[ -n "$BASE_SEPOLIA_RPC_URL" ]'
        silent: true
      - echo "‚úÖ Base Sepolia RPC URL configured"
      - cmd: '[ -n "$BASESCAN_SEPOLIA_API_KEY" ]'
        silent: true
      - echo "‚úÖ Basescan Sepolia API key configured"

  check-env:mainnet:
    desc: Check Base mainnet environment configuration
    cmds:
      - echo "Checking Base mainnet environment..."
      - cmd: '[ -n "$BASE_MAINNET_RPC_URL" ]'
        silent: true
      - echo "‚úÖ Base mainnet RPC URL configured"
      - cmd: '[ -n "$BASESCAN_API_KEY" ]'
        silent: true
      - echo "‚úÖ Basescan API key configured"